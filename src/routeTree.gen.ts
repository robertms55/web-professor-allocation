/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProfessorsIndexImport } from './routes/professors/index'
import { Route as DepartmentsIndexImport } from './routes/departments/index'
import { Route as CoursesIndexImport } from './routes/courses/index'
import { Route as AllocationsIndexImport } from './routes/allocations/index'
import { Route as DepartmentsNewImport } from './routes/departments/new'
import { Route as DepartmentsEditImport } from './routes/departments/edit'
import { Route as CoursesNewImport } from './routes/courses/new'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfessorsIndexRoute = ProfessorsIndexImport.update({
  id: '/professors/',
  path: '/professors/',
  getParentRoute: () => rootRoute,
} as any)

const DepartmentsIndexRoute = DepartmentsIndexImport.update({
  id: '/departments/',
  path: '/departments/',
  getParentRoute: () => rootRoute,
} as any)

const CoursesIndexRoute = CoursesIndexImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => rootRoute,
} as any)

const AllocationsIndexRoute = AllocationsIndexImport.update({
  id: '/allocations/',
  path: '/allocations/',
  getParentRoute: () => rootRoute,
} as any)

const DepartmentsNewRoute = DepartmentsNewImport.update({
  id: '/departments/new',
  path: '/departments/new',
  getParentRoute: () => rootRoute,
} as any)

const DepartmentsEditRoute = DepartmentsEditImport.update({
  id: '/departments/edit',
  path: '/departments/edit',
  getParentRoute: () => rootRoute,
} as any)

const CoursesNewRoute = CoursesNewImport.update({
  id: '/courses/new',
  path: '/courses/new',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/courses/new': {
      id: '/courses/new'
      path: '/courses/new'
      fullPath: '/courses/new'
      preLoaderRoute: typeof CoursesNewImport
      parentRoute: typeof rootRoute
    }
    '/departments/edit': {
      id: '/departments/edit'
      path: '/departments/edit'
      fullPath: '/departments/edit'
      preLoaderRoute: typeof DepartmentsEditImport
      parentRoute: typeof rootRoute
    }
    '/departments/new': {
      id: '/departments/new'
      path: '/departments/new'
      fullPath: '/departments/new'
      preLoaderRoute: typeof DepartmentsNewImport
      parentRoute: typeof rootRoute
    }
    '/allocations/': {
      id: '/allocations/'
      path: '/allocations'
      fullPath: '/allocations'
      preLoaderRoute: typeof AllocationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/courses/': {
      id: '/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesIndexImport
      parentRoute: typeof rootRoute
    }
    '/departments/': {
      id: '/departments/'
      path: '/departments'
      fullPath: '/departments'
      preLoaderRoute: typeof DepartmentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/professors/': {
      id: '/professors/'
      path: '/professors'
      fullPath: '/professors'
      preLoaderRoute: typeof ProfessorsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/courses/new': typeof CoursesNewRoute
  '/departments/edit': typeof DepartmentsEditRoute
  '/departments/new': typeof DepartmentsNewRoute
  '/allocations': typeof AllocationsIndexRoute
  '/courses': typeof CoursesIndexRoute
  '/departments': typeof DepartmentsIndexRoute
  '/professors': typeof ProfessorsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/courses/new': typeof CoursesNewRoute
  '/departments/edit': typeof DepartmentsEditRoute
  '/departments/new': typeof DepartmentsNewRoute
  '/allocations': typeof AllocationsIndexRoute
  '/courses': typeof CoursesIndexRoute
  '/departments': typeof DepartmentsIndexRoute
  '/professors': typeof ProfessorsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/courses/new': typeof CoursesNewRoute
  '/departments/edit': typeof DepartmentsEditRoute
  '/departments/new': typeof DepartmentsNewRoute
  '/allocations/': typeof AllocationsIndexRoute
  '/courses/': typeof CoursesIndexRoute
  '/departments/': typeof DepartmentsIndexRoute
  '/professors/': typeof ProfessorsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/courses/new'
    | '/departments/edit'
    | '/departments/new'
    | '/allocations'
    | '/courses'
    | '/departments'
    | '/professors'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/courses/new'
    | '/departments/edit'
    | '/departments/new'
    | '/allocations'
    | '/courses'
    | '/departments'
    | '/professors'
  id:
    | '__root__'
    | '/'
    | '/courses/new'
    | '/departments/edit'
    | '/departments/new'
    | '/allocations/'
    | '/courses/'
    | '/departments/'
    | '/professors/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoursesNewRoute: typeof CoursesNewRoute
  DepartmentsEditRoute: typeof DepartmentsEditRoute
  DepartmentsNewRoute: typeof DepartmentsNewRoute
  AllocationsIndexRoute: typeof AllocationsIndexRoute
  CoursesIndexRoute: typeof CoursesIndexRoute
  DepartmentsIndexRoute: typeof DepartmentsIndexRoute
  ProfessorsIndexRoute: typeof ProfessorsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoursesNewRoute: CoursesNewRoute,
  DepartmentsEditRoute: DepartmentsEditRoute,
  DepartmentsNewRoute: DepartmentsNewRoute,
  AllocationsIndexRoute: AllocationsIndexRoute,
  CoursesIndexRoute: CoursesIndexRoute,
  DepartmentsIndexRoute: DepartmentsIndexRoute,
  ProfessorsIndexRoute: ProfessorsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/courses/new",
        "/departments/edit",
        "/departments/new",
        "/allocations/",
        "/courses/",
        "/departments/",
        "/professors/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/courses/new": {
      "filePath": "courses/new.tsx"
    },
    "/departments/edit": {
      "filePath": "departments/edit.tsx"
    },
    "/departments/new": {
      "filePath": "departments/new.tsx"
    },
    "/allocations/": {
      "filePath": "allocations/index.tsx"
    },
    "/courses/": {
      "filePath": "courses/index.tsx"
    },
    "/departments/": {
      "filePath": "departments/index.tsx"
    },
    "/professors/": {
      "filePath": "professors/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
